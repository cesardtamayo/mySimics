
dml 1.2;

// Add more registers and reference each other in their functionality.
// Flags with count_order or things like that

device simple_device;
parameter desc = "Simple device to learn Simics";
parameter documentation = "Learning Simics following Model Builder User's Guide.";

// import "utility.dml";


// This template is used to implement the write() for the MUX input registers
// because they need to update the output register if they are being "selected"
// at the time of update:
template myInputMuxWrite{
    method write(value){
        $this = value;
        // updating output register to make sure input register change is reflected  
        $updateOutputRegister();
    }
}

attribute reads_count "An integer attribute that counts the number of reads."{
    parameter allocate_type = "int32";

    method after_set {
        log "info": "Someone updated reads_count!";        
    }

    method after_get {
        log "info": "Someone read reads_count!";        
    }
}

// Is there a better way to do this??? 
attribute register_selection "Current SEL value"{
    parameter documentation = "Created to be able to reference when the input registers are updated.";
    parameter allocate_type = "int32";

    method after_set {
        log "info": "register_selection updated";        
    }
}

bank regs{

    method updateOutputRegister(){
        // This function updates the output register based on the register_selection value

        // log "info": "Updating output register to input number %i", $register_selection;                
        switch($register_selection){
            case 0:
                $outputRegister = $inputRegister0;
                break;
            case 1:
                $outputRegister = $inputRegister1;
                break;
            case 2:
                $outputRegister = $inputRegister2;
                break;
            case 3:
                $outputRegister = $inputRegister3;
                break;
            default:
                log "error": "Invalid register selection.";
        }
    }   

    register config         size 4 @ 0x0000 {
        field EN    @[0]    "Enabled";
        field SEL   @[2:1]  "Register selection" {
            method write(value){
                log "info": "updating register_selection to %d", value;
                $register_selection = value;                
                $updateOutputRegister();                
            }
        }
    }

    register inputRegister0    size 4 @ 0x0004 is (myInputMuxWrite);
    register inputRegister1    size 4 @ 0x0008 is (myInputMuxWrite);
    register inputRegister2    size 4 @ 0x000c is (myInputMuxWrite);
    register inputRegister3    size 4 @ 0x0010 is (myInputMuxWrite);

    register outputRegister   size 4 @ 0x0014 {
        method read() -> (value){
            log "info": "Reading outputRegister  ...";            
            value = $this;                 
            $reads_count = $reads_count + 1;       
        }

        method write(value) {
            log "error": "outputRegister cannot be written.";             
        }
    }    
}